<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Franz`s blog</title>
  <icon>https://www.gravatar.com/avatar/2e830db9ff9a923cf7910f87dbcb3f90</icon>
  
  <link href="https://franzli347.github.io/atom.xml" rel="self"/>
  
  <link href="https://franzli347.github.io/"/>
  <updated>2023-03-25T13:22:02.919Z</updated>
  <id>https://franzli347.github.io/</id>
  
  <author>
    <name>Franz li</name>
    <email>franzli2003@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Openresty 实现 WebDAV 功能 ，并且实现在 WebDAV 下多用户认证以及访问目录控制</title>
    <link href="https://franzli347.github.io/2023/03/25/Openresty-%E5%AE%9E%E7%8E%B0-WebDAV-%E5%8A%9F%E8%83%BD-%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%AE%9E%E7%8E%B0%E5%9C%A8-WebDAV-%E4%B8%8B%E5%A4%9A%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E4%BB%A5%E5%8F%8A%E8%AE%BF%E9%97%AE%E7%9B%AE%E5%BD%95%E6%8E%A7%E5%88%B6/"/>
    <id>https://franzli347.github.io/2023/03/25/Openresty-%E5%AE%9E%E7%8E%B0-WebDAV-%E5%8A%9F%E8%83%BD-%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%AE%9E%E7%8E%B0%E5%9C%A8-WebDAV-%E4%B8%8B%E5%A4%9A%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E4%BB%A5%E5%8F%8A%E8%AE%BF%E9%97%AE%E7%9B%AE%E5%BD%95%E6%8E%A7%E5%88%B6/</id>
    <published>2023-03-25T12:26:54.000Z</published>
    <updated>2023-03-25T13:22:02.919Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-介绍"><a href="#0-介绍" class="headerlink" title="0.介绍"></a>0.介绍</h2><blockquote><p>基于Web的分布式编写和版本控制（WebDAV）是超文本传输协议（HTTP）的扩展，有利于用户间协同编辑和管理存储在万维网服务器文档。WebDAV由互联网工程任务组的工作组在RFC 4918中定义。<br>WebDAV协议为用户在服务器上创建、更改和移动文档提供了一个框架。WebDAV协议最重要的功能包括维护作者或修改日期的属性、名字空间管理、集合和覆盖保护。维护属性包括创建、删除和查询文件信息等。名字空间管理处理在服务器名称空间内复制和移动网页的能力。集合（Collections）处理各种资源的创建、删除和列举 (from wikipedia)  <a href="https://zh.wikipedia.org/zh-cn/%E5%9F%BA%E4%BA%8EWeb%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%96%E5%86%99%E5%92%8C%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6">wikipedia</a> </p></blockquote><p>nginx 中的 <a href="http://nginx.org/en/docs/http/ngx_http_dav_module.html">ngx_http_dav_module</a> 模块提供了该功能的支持，<a href="https://github.com/arut/nginx-dav-ext-module">nginx-dav-ext-module</a> 主要是实现了 NGINX WebDAV 未实现的命令支持，包括：PROPFIND &amp; OPTIONS 对于完整的 WebDAV 支持</p><p>通过 windows 自带的网络驱动器映射可以实现以下效果</p><p><img src="F:\project\franz-blog\source_posts\Openresty-实现-WebDAV-功能-，并且实现在-WebDAV-下多用户认证以及访问目录控制\image-20230325204817756.png" alt="image-20230325204817756"></p><h2 id="1-Openresty-的编译与安装"><a href="#1-Openresty-的编译与安装" class="headerlink" title="1.Openresty 的编译与安装"></a>1.Openresty 的编译与安装</h2><p>OpenResty 是一个基于 Nginx 的 Web 平台，整合了诸如 LuaJIT、LuaNginxModule 等模块,所以我们用 Openresty 代替 nginx</p><p>因为webdav需要 ngx_http_dav_module 以及 nginx-dav-ext-module 的支持 ，所以我们要自己编译自己的Openresty </p><p><strong>环境 Ubuntu 22.04</strong></p><h3 id="1-1-Openresty-源代码下载"><a href="#1-1-Openresty-源代码下载" class="headerlink" title="1.1 Openresty 源代码下载"></a>1.1 Openresty 源代码下载</h3><p>通过 <a href="https://openresty.org/cn/download.html">Openresty 官方网站</a>获取最新的源代码并且解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://openresty.org/download/openresty-1.21.4.1.tar.gz</span><br><span class="line">tar -xzvf openresty-1.21.4.1.tar.gz</span><br></pre></td></tr></table></figure><h3 id="1-2-开发依赖安装"><a href="#1-2-开发依赖安装" class="headerlink" title="1.2 开发依赖安装"></a>1.2 开发依赖安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line">apt-get install libpcre3-dev \</span><br><span class="line">    libssl-dev perl make build-essential curl \</span><br><span class="line">    libxml2 libxml2-dev libxslt-dev</span><br></pre></td></tr></table></figure><h3 id="1-3-下载-nginx-dav-ext-module-并且配置编译时所添加的module"><a href="#1-3-下载-nginx-dav-ext-module-并且配置编译时所添加的module" class="headerlink" title="1.3 下载 nginx-dav-ext-module 并且配置编译时所添加的module"></a>1.3 下载 nginx-dav-ext-module 并且配置编译时所添加的module</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> openresty-1.21.4.1</span><br><span class="line"></span><br><span class="line">wget https://codeload.github.com/arut/nginx-dav-ext-module/tar.gz/refs/tags/v3.0.0 -O nginx-dav-ext-module.tar.gz</span><br><span class="line"></span><br><span class="line">tar -xzvf nginx-dav-ext-module.tar.gz</span><br><span class="line"></span><br><span class="line">./configure --prefix=/usr/local/openresty \</span><br><span class="line">            --with-http_dav_module \</span><br><span class="line">            --add-module=nginx-dav-ext-module \</span><br><span class="line">            --without-http_gzip_module </span><br></pre></td></tr></table></figure><h3 id="1-4-编译并且安装"><a href="#1-4-编译并且安装" class="headerlink" title="1.4 编译并且安装"></a>1.4 编译并且安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gmake</span><br><span class="line"></span><br><span class="line">gmake install </span><br></pre></td></tr></table></figure><p>执行上述命令后会发现 Openresty 已经安装在 &#x2F;usr&#x2F;local&#x2F;openresty 但是 openresty 命令还是不可用,可以通过添加软连接实现可以在任意文件夹使用 openresty 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/openresty/bin</span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">ln</span> -s `<span class="built_in">pwd</span>`/openresty /usr/local/bin/openresty</span><br><span class="line">sudo <span class="built_in">ln</span> -s `<span class="built_in">pwd</span>`/opm /usr/local/bin/opm</span><br></pre></td></tr></table></figure><p>运行 Openresty 访问 <a href="http://localhost/">http://localhost</a> 将会出现 Welcome to OpenResty! 字样，代表 OpenResty 已经安装成功!</p><p><img src="F:\project\franz-blog\source_posts\Openresty-实现-WebDAV-功能-，并且实现在-WebDAV-下多用户认证以及访问目录控制\image-20230325205506326.png" alt="image-20230325205506326"></p><h2 id="2-最简单的-Webdav-实现"><a href="#2-最简单的-Webdav-实现" class="headerlink" title="2. 最简单的 Webdav 实现"></a>2. 最简单的 Webdav 实现</h2><p>修改配置文件 <code>/usr/local/openresty/nginx/conf/nginx.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">... # 你自己的某些配置</span><br><span class="line"> </span><br><span class="line">    server &#123;</span><br><span class="line">        ...</span><br><span class="line"> </span><br><span class="line">        location / &#123;</span><br><span class="line">        # webdav 访问的根目录 ，暂时使用root </span><br><span class="line">            root /www/wwwroot/webdav; </span><br><span class="line">    # 文件暂存地址</span><br><span class="line">            client_body_temp_path /www/wwwroot/webdav/client_temp; </span><br><span class="line"> # webdav 支持的方法</span><br><span class="line">            dav_methods PUT DELETE MKCOL COPY MOVE;</span><br><span class="line">            dav_ext_methods PROPFIND OPTIONS LOCK UNLOCK;</span><br><span class="line">            </span><br><span class="line">            create_full_put_path on;</span><br><span class="line">            dav_accessuser:rw group:rw  all:r;</span><br><span class="line"> # 网页页面自动索引文件</span><br><span class="line">            autoindex on;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样可以实现最基本的无认证，无动态目录WebDAV </p><p>这篇我们编译了带实现 webdav module支持的openresy ，并且实现了最简单的WebDAV，下一篇将会通过编写lua脚本实现多用户认证，以及动态控制访问目录的功能（应该会很快写出来）</p>]]></content>
    
    
    <summary type="html">在 Nginx 下实现 WebDAV 功能，并且通过 lua 脚本实现 WebDAV 中用户的认证以及控制不同用户的目录访问权</summary>
    
    
    
    
    <category term="后端" scheme="https://franzli347.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="webdav" scheme="https://franzli347.github.io/tags/webdav/"/>
    
    <category term="nginx" scheme="https://franzli347.github.io/tags/nginx/"/>
    
    <category term="lua" scheme="https://franzli347.github.io/tags/lua/"/>
    
    <category term="Openresty" scheme="https://franzli347.github.io/tags/Openresty/"/>
    
  </entry>
  
  <entry>
    <title>基础算法-二分答案</title>
    <link href="https://franzli347.github.io/2023/03/21/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"/>
    <id>https://franzli347.github.io/2023/03/21/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/</id>
    <published>2023-03-21T08:01:12.000Z</published>
    <updated>2023-03-21T12:09:48.498Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二分答案："><a href="#二分答案：" class="headerlink" title="二分答案："></a>二分答案：</h2><blockquote><p>解题的时候往往会考虑枚举答案然后检验枚举的值是否正确。若满足单调性，则满足使用二分法的条件。把这里的枚举换成二分，就变成了「二分答案」。<a href="https://oi-wiki.org/basic/binary/#%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88">OI-WIKI</a></p></blockquote><h2 id="二分答案模板"><a href="#二分答案模板" class="headerlink" title="二分答案模板"></a>二分答案模板</h2><h3 id="寻找-gt-x3D-的最小值"><a href="#寻找-gt-x3D-的最小值" class="headerlink" title="寻找 &gt;&#x3D; 的最小值"></a>寻找 &gt;&#x3D; 的最小值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">bserach_l</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + ((r - l) &gt;&gt; <span class="number">1</span>); <span class="comment">// 防止溢出</span></span><br><span class="line">        <span class="keyword">if</span> (check(mid))</span><br><span class="line">            r = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="寻找-lt-x3D-的模板"><a href="#寻找-lt-x3D-的模板" class="headerlink" title="寻找 &lt;&#x3D; 的模板"></a>寻找 &lt;&#x3D; 的模板</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">bserach_l</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + ((r - l) &gt;&gt; <span class="number">1</span>) + <span class="number">1</span>; <span class="comment">// 防止溢出</span></span><br><span class="line">        <span class="keyword">if</span> (check(mid))</span><br><span class="line">            r = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>例题 <a href="https://www.luogu.com.cn/problem/P2440">P2440 木材加工</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n,k;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        n = sc.nextInt();</span><br><span class="line">        k = sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            arr[i] = sc.nextInt();</span><br><span class="line">            max = Math.max(max,arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">1</span> , r = max;</span><br><span class="line">        <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxVal</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt;  r)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + ((r - l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            val = getChunkNums(arr,mid);</span><br><span class="line">            <span class="keyword">if</span> (val &lt; k)&#123;</span><br><span class="line">                r = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (mid &gt;= res)&#123;</span><br><span class="line">                    res = mid;</span><br><span class="line">                    maxVal = val;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(maxVal &gt;= k ? res : <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getChunkNums</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> l)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">0</span>; i1 &lt; arr.length; i1++) &#123;</span><br><span class="line">            res += arr[i1] / l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">二分答案的模板与例题</summary>
    
    
    
    
    <category term="算法" scheme="https://franzli347.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>go学习笔记和一些语法糖</title>
    <link href="https://franzli347.github.io/2023/03/21/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://franzli347.github.io/2023/03/21/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2023-03-21T07:23:10.000Z</published>
    <updated>2023-03-21T13:44:42.665Z</updated>
    
    <content type="html"><![CDATA[<h3 id="…-的用法"><a href="#…-的用法" class="headerlink" title="… 的用法"></a>… 的用法</h3><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">(args ...<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, val := <span class="keyword">range</span> args &#123;</span><br><span class="line"><span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打散slice"><a href="#打散slice" class="headerlink" title="打散slice"></a>打散slice</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    b(s...)  <span class="comment">// 这里的slice &#123;1，2，3&#125; 被打散为 1，2，3 传入函数b</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">b</span><span class="params">(args2 ...<span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, i := <span class="keyword">range</span> args2 &#123;</span><br><span class="line"><span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="go中的继承"><a href="#go中的继承" class="headerlink" title="go中的继承"></a>go中的继承</h3><p>先看一段代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> (</span><br><span class="line">RouterGroup <span class="keyword">struct</span> &#123;</span><br><span class="line">prefix      <span class="type">string</span></span><br><span class="line">middlewares []HandlerFunc</span><br><span class="line">parent      *RouterGroup</span><br><span class="line">engine      *Engine</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Engine <span class="keyword">struct</span> &#123;</span><br><span class="line">*RouterGroup</span><br><span class="line">router *router</span><br><span class="line">groups []*RouterGroup</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>可以看到上面<code>Engine</code>中包含了<code>*RouterGroup</code>这一匿名字段，<code>Engine</code> 结构体将直接继承 <code>RouterGroup</code> 中的所有字段和方法，并且不需要使用 <code>.prefix</code>、<code>.middlewares</code>、<code>.parent</code> 等字段来引用 <code>RouterGroup</code> 中的属性和方法，而可以直接使用 <code>Engine</code> 实例进行访问。</p><h3 id="go-tag"><a href="#go-tag" class="headerlink" title="go tag"></a>go tag</h3><p>tag 是一种结构化的注释方式，它可以用于给结构体字段添加元数据，例如字段的名称、类型、格式、验证规则等信息。</p><p>示例如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span> <span class="string">`json:&quot;name&quot; xml:&quot;name&quot;`</span></span><br><span class="line">    Age  <span class="type">int</span>    <span class="string">`json:&quot;age&quot; xml:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以最终通过反射拿到tag的k-v信息</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span> <span class="string">`json:&quot;name&quot; xml:&quot;name&quot;`</span></span><br><span class="line">    Age  <span class="type">int</span>    <span class="string">`json:&quot;age&quot; xml:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p := Person&#123;Name: <span class="string">&quot;Alice&quot;</span>, Age: <span class="number">25</span>&#125;</span><br><span class="line">    t := reflect.TypeOf(p)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; t.NumField(); i++ &#123;</span><br><span class="line">        field := t.Field(i)</span><br><span class="line">        tag := field.Tag</span><br><span class="line">        fmt.Printf(<span class="string">&quot;Field: %s, JSON tag: %s, XML tag: %s\n&quot;</span>,</span><br><span class="line">            field.Name, tag.Get(<span class="string">&quot;json&quot;</span>), tag.Get(<span class="string">&quot;xml&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cap和len"><a href="#cap和len" class="headerlink" title="cap和len"></a>cap和len</h3><p><code>cap</code> 和 <code>len</code> 都是内置函数，用于获取切片、数组、map 和 channel 的长度和容量信息。</p><p>slice作为一个array的引用其cap和len并不一定相等，slice的容量可以动态扩展，如果在使用 <code>append</code> 函数将元素添加到切片时长度超过了当前容量，Go 会动态分配一块更大的内存作为底层数组，并将原有数据复制到新的内存空间中，完成切片的扩容过程。如果切片的长度没有超过容量，则不会进行扩容。这个过程会导致切片的地址发生变化。可以通过对比改变前后切片的地址来判断是否扩容。</p><h3 id="any"><a href="#any" class="headerlink" title="any"></a>any</h3><p>在go1.18之后添加的新关键字 <a href="https://github.com/golang/go/issues/49884">all: rewrite <code>interface&#123;&#125;</code> to <code>any</code> #49884</a></p><p>等同于之前的interface{} </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> any <span class="keyword">interface</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>用法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">(v any)</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> v.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="type">int</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;int type val&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="type">bool</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;bool type val&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">go学习过程中的一些知识点</summary>
    
    
    
    
    <category term="后端" scheme="https://franzli347.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="go" scheme="https://franzli347.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot创建自己的Start</title>
    <link href="https://franzli347.github.io/2023/03/05/SpringBoot%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84Starter/"/>
    <id>https://franzli347.github.io/2023/03/05/SpringBoot%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84Starter/</id>
    <published>2023-03-05T13:33:26.000Z</published>
    <updated>2023-03-21T07:26:00.489Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>创建SpringBoot项目</p><p>包含以下依赖</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--自动生成meta-data--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>修改<code>pom.xml</code></p><p>修改pom.xml为对应项目名称 </p><p>starter推荐命名 xxxxx-start</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.frz<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>frzApi-client-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>frzApi-client-sdk<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>frzApi-client-sdk<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写<code>AutoConfiguration</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;frzapi.client&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FrzApiClientConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FrzApiClient <span class="title function_">frzApiClient</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FrzApiClient</span>(accessKey, secretKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>ConfigurationProperties</code>注解能够读取application 中的配置属性</p></li><li><p>配置<code>EnableAutoConfiguration</code></p><p>在<code>resource/META-INF</code>创建<code>spring.factories</code>文件,设置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">xxx</span></span><br></pre></td></tr></table></figure><blockquote><p>xxx为配置类Reference</p></blockquote></li></ol><p><img src="/2023/03/05/SpringBoot%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84Starter/im1.png" alt="目录结构" title="目录结构"></p><p>通过maven install 后即成功安装到本地maven仓库</p><p>在其他项目的依赖中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.frz<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>frzApi-client-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>既可以正常使用</p>]]></content>
    
    
    <summary type="html">开发API开放平台，提供java对应的客户端SDK</summary>
    
    
    
    
    <category term="后端" scheme="https://franzli347.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="sprigboot" scheme="https://franzli347.github.io/tags/sprigboot/"/>
    
    <category term="java" scheme="https://franzli347.github.io/tags/java/"/>
    
  </entry>
  
</feed>
